// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-axios";
import type {
  DeleteAccountData,
  DeleteAccountResponse,
  DeleteAccountError,
  GetAccountData,
  GetAccountResponse,
  GetAccountError,
  CreateAccountData,
  CreateAccountResponse,
  CreateAccountError,
  HealthCheckData,
  HealthCheckResponse,
  HealthCheckError,
  CreateProjectData,
  CreateProjectResponse,
  CreateProjectError,
  GetAccountProjectsData,
  GetAccountProjectsResponse,
  GetAccountProjectsError,
  DeleteProjectData,
  DeleteProjectResponse,
  DeleteProjectError,
  GetProjectByIdData,
  GetProjectByIdResponse,
  GetProjectByIdError,
  UpdateProjectData,
  UpdateProjectResponse,
  UpdateProjectError,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Delete your account
 * Deletes the account for the currently authenticated user.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAccountResponse,
    DeleteAccountError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/accounts",
  });
};

/**
 * Get your account
 * Fetches the account for the currently authenticated user.
 */
export const getAccount = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountResponse,
    GetAccountError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/accounts",
  });
};

/**
 * Create an account
 * Creates an account for the currently authenticated user.
 */
export const createAccount = <ThrowOnError extends boolean = false>(
  options?: Options<CreateAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAccountResponse,
    CreateAccountError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/accounts",
  });
};

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HealthCheckResponse,
    HealthCheckError,
    ThrowOnError
  >({
    ...options,
    url: "/health",
  });
};

/**
 * Create a project
 * Creates a project for the currently authenticated account.
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProjectResponse,
    CreateProjectError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/project",
  });
};

/**
 * Get all account projects
 * Fetches all projects owned by the currently authenticated account.
 */
export const getAccountProjects = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccountProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountProjectsResponse,
    GetAccountProjectsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/projects",
  });
};

/**
 * Delete a project
 * Deletes a project by its id.
 */
export const deleteProject = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProjectResponse,
    DeleteProjectError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/projects/{id}",
  });
};

/**
 * Get a project by id
 * Fetches a project by its id.
 */
export const getProjectById = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectByIdResponse,
    GetProjectByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/projects/{id}",
  });
};

/**
 * Update a project
 * Updates a project using its id as an identifier.
 */
export const updateProject = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProjectResponse,
    UpdateProjectError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/projects/{id}",
  });
};
